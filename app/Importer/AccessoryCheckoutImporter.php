<?php

namespace App\Importer;

use App\Events\CheckoutableCheckedIn;
use App\Events\CheckoutableCheckedOut;
use App\Models\Accessory;
use App\Models\User;
use Carbon\Carbon;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\DB;

class AccessoryCheckoutImporter extends ItemImporter
{
    public function __construct($filename)
    {

        parent::__construct($filename);

    }

    protected function handle($row)
    {

        parent::handle($row); // TODO: Change the autogenerated stub
        $this->checkout($row);
    }

    /**
     * Create an accessory if a duplicate does not exist
     *
     * @author Daniel Melzter
     * @since 3.0
     */
    public function checkout($row)
    {
        $accessory = Accessory::withCount('users as users_count')->where('name', $row['accessory name'])->first();
        // Check if the accessory exists
        if (is_null($accessory)) {
            $this->log('Accessory ' . $row['accessory name'] . ' was not found.  ');
            return;
        }
        $user = User::where('username', '=', $row['username'])->first();
        if (!$user) {
            $this->log('User ' . $row['username'] . ' was not found.  ');
            return;
        }

        if ($accessory->numRemaining() <= 0) {
            $this->log('Accessory ' . $row['accessory name'] . ' is not available.  ');
            return;
        }

        // Update the accessory data
        try {
            $accessory->assigned_to = $user->id;
            $accessory->users()->attach($accessory->id, [
                'accessory_id' => $accessory->id,
                'created_at' => Carbon::now(),
                'user_id' => Auth::user()->id,
                'assigned_to' => $user->id,
                'note' => $row['notes'],
            ]);
            event(new CheckoutableCheckedOut($accessory, $user, Auth::user(), $row['notes']));
        } catch (\Exception $e) {
            $this->logError($accessory, 'Accessory');
            return;
        }

    }
}
